;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname practica_0_prog_1) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp")) #f)))
;2 Expresiones aritmeticas
; 1. Considere las siguientes expresiones aritméticas:
;a.Exprese cada una de ellas con la sintaxis de racket.

;12 * 5 - 7 * 6
;(-
; (*
;  12 5)
; (*
;  7 6))

;3 * 5 - 7 * 4 / 14 + 3 / 1
;(+
; (-
;  (* 3 5)(* 7 4))
; (/ 3 1))

;cos(0.8) + 1/5 + sen(0.5) * 3.5
;(+
; (cos 0.8)
; 1/5
; (*
;  (sin 0.5) 3.5))

;b. Sin usar DrRacket evalúelas. Aquí un ejemplo para la expresión
; (* (+ 2 3) 4):
;==
;(*
;5 4)
;==
;20

;(- (* 12 5) (* 7 6))
;==
;(- 60 42)
;==
;18

;(+ (- (* 3 5)(* 7 4)) (/ 3 1))
;==
;(+
; (-15 28) 3)
;==
;(+ -13 3)
;==
;-10

;(+ (cos 0.8) 1/5 (* (sin 0.5) 3.5))
;==
;(+ #i0.6967067093471654 1/5 (* #i0.6967067093471654 7/2)
;==
;(+ #i0.6967067093471654 1/5 #i1.6779893851147105)
;==
;#i2.574696094461876

;2. Usando DrRacket , evalúe las siguientes expresiones:
;    (/ 1 (sin (sqrt 3)))
;
;    (* (sqrt 2) (sin pi))
;
;    (+ 3 (sqrt (- 4)))
;
;    (* (sqrt 5) (sqrt (/ 3 (cos pi))))

    ;(/ (sqrt 5) (sin (* 3 0)))

    ;(/ (+ 3) (* 2 4))
;
;    (* 1 2 3 4 5 6 7 8)
;
;    (/ 120 2 3 2 2 5)

;3. En los ejercicios anteriores aparecen algunas funciones como cos, sin, sqrt.

;3 Strings

;    (string-append "Hola" "mundo")
;
;    (string-append "Pro" "gra" "ma.")
;
;    (number->string 1357)
;
;    (string-append "La respuesta es " (+ 21 21))
;
;    (string-append "La respuesta es " (number->string (+ 21 21)))
;
;    (* (string-length "Hola") (string-length "Chau"))

;4 Valores de verdad

;4.2 Mezclando booleanos y números
;1. Evalúe en DrRacket las siguientes expresiones:
;a.
;(not #t)
;(or #t #f)
;(and #t #f)
;(and #t (or #f (not #f)) (not #t))
;(not (= 2 (* 1 3)))
;(or (= 2 (* 1 3)) (< 4 (+ 3 2)))

;2.Considere la siguiente frase:
;a. El coseno de 0 es positivo
;(< 0 (cos 0))
;(= 14 (string-length "Hola, mundo"))
;(and (> pi 3) (< pi 4))
;(= (sqrt 625) (sqr 5))

;5 Imágenes
;(circle 10 "solid" "red")
;(rectangle 10 20 "solid" "blue")
;(rectangle 20 12 "outline" "magenta")
;(overlay (rectangle 20 20 "solid" "blue") (circle 7 "solid" "green"))
;(empty-scene 100 100)
;(place-image (circle 10 "solid" "blue")
;             40 80
;             (empty-scene 100 100))
;(+ (image-width (circle 10 "solid" "red"))
;   (image-height (rectangle 10 20 "solid" "blue")))

;6.1 Constantes
;(define abc "abc")
;abc
;(define "abc" abc)
;(define abc abc)
;(define P "Neptuno")
;(define 1TRES 3)
;(define CINCO (+ 1 (* 2 2)))
;(define VERDADERO #true)
;(define PUNTOROJO (circle 3 "solid" "red"))

;6.2 Definiendo funciones
;1

;(define (f x) (+ x 1))
;(define (doble x) (* x 2))
;(define (h x y) (< (doble y)))
;(define (cuad-azul x) (square x "solid" "blue"))
;
;(cuad-azul (doble 10))
;(and (h 2 3) (h 3 4))
;(= (f 1) (doble 1))

;2
;(define (distancia-origen x y)
;  (sqrt (+ (sqr x)
;           (sqr y))))

;3
;(define (distancia-entre-puntos x1 x2 y1 y2)
;  (sqrt (+ (sqr(- x2
;                  x1))
;           (sqr (- y2
;                   y1)))))

;4
;(define (vol-cubo x)
;  (expt x 3))

;5
;(define (area-cubo x)
;  (sqr x))

;6
(define (metro-pie x)
  (* x 3.4614053305642))

;7
(define (cel-far x)
  ((+ (* x
         9/5))
   32))

;8
(define (posible? a b c)
  (and (< a (+ b c))
       (< b (+ a c ))
       (<c (+ a b))))

;9
(define (pitagorica? a b c)
  (= (sqr a)
     (+ (sqr b)
        (sqr c))))

;10
(define (suma-long str1 str2)
  (+ (string-length str1) (string-length str2)))

;11
(define (comienzaA? str1)
  (= (string-ith str1 0) "A"))

;12
(define (poner- str1 posicion)
  ())